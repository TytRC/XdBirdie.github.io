<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BIRDIE</title>
  
  <subtitle>Like a BIRDIE flies into your heart...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-21T15:53:06.122Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rain Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring学习日记-01</title>
    <link href="http://yoursite.com/2020/05/21/Spring%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-01/"/>
    <id>http://yoursite.com/2020/05/21/Spring%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-01/</id>
    <published>2020-05-21T15:32:54.000Z</published>
    <updated>2020-05-21T15:53:06.122Z</updated>
    
    <content type="html"><![CDATA[<p>Birdie要开始学Spring啦，冲冲冲</p><a id="more"></a><h1 id="Spring学习"><a href="#Spring学习" class="headerlink" title="Spring学习"></a>Spring学习</h1><h2 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h2><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><p><strong>官方文档</strong>：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html</a></p><p><strong>下载地址：</strong> <a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/release/org/springframework/spring/</a></p><p><strong>Github:</strong> <a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p><p><strong>maven包</strong> ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h3><ul><li>Spring是一个开源的免费的框架</li><li>Spring是一个轻量级的、非入侵式的框架</li><li>控制反转（IOC），面向切面编程（AOP）</li><li>支持事务的处理，对框架整合的支持</li></ul><p>总结：Spring是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架</p><h3 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h3><p><img src="D:\blog\source\_posts\Spring学习日记-01\1219227-20170930225010356-45057485.gif" alt="img"></p><h3 id="1-4、拓展"><a href="#1-4、拓展" class="headerlink" title="1.4、拓展"></a>1.4、拓展</h3><p>构建一切、协调一切、连接一切</p><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速地开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>SpringCloud是基于SpringBoot实现的</li></ul></li></ul><p>大多数公司都在用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及SpringMVC。承上启下。</p><p><strong>弊端：</strong> 发展太久之后，违背了原来的理念，配置十分繁琐，人称：“配置地狱”。</p><h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><ol><li>UserDao 接口</li></ol><ol><li>UserDaolmpl 实现类</li></ol><ol><li>UserService 业务接口</li></ol><ol><li>UserServiceImpl 业务实现类</li></ol><p>用一个Set接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>之前，程序具有主动性，程序主动创建对象</li><li>使用了set注入之后，程序不再具有主动性，而是变成了被动的接收对象</li></ul><p>我们可以不再去管理对象的创建，而交给用户自己创建。习通耦合性大大降低，我们可以专注于业务的实现上，这是IOC的原型。</p><p><strong>控制反转：</strong> 获得依赖对象的方式改变了</p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入（DI）。</strong></p><h2 id="3、hellospring"><a href="#3、hellospring" class="headerlink" title="3、hellospring"></a>3、hellospring</h2><ol><li>hello是谁创建的？<ul><li>hello是spring创建的</li></ul></li><li>hello对象的属性是谁设置的？<ul><li>hello对象的属性由Sping来创建的</li></ul></li></ol><p>IOC是一种编程思想，由主动的编程变成被动的接收。</p><p>现在需求的变更我们彻底不用改程序了，要实现不同的程序，只需要在xml配置中进行修改即可（妙啊妙啊），对象由Spring来创建、装配、管理</p><h2 id="4、IOC管理对象"><a href="#4、IOC管理对象" class="headerlink" title="4、IOC管理对象"></a>4、IOC管理对象</h2><ol><li><p>使用无参构造创建对象（默认方式）</p></li><li><p>假设我们要以有参构造创建对象</p><ul><li><p>要尽可能消除歧义</p></li><li><p>在不存在潜在歧义的情况下，可以直接按照顺序，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> x.y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThingOne</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThingOne</span><span class="params">(ThingTwo thingTwo, ThingThree thingThree)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下，可以直接使用下面的方式进行参数注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanOne"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingOne"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"beanTwo"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"beanThree"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanTwo"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingTwo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanThree"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingThree"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>上面的方式通过应用另一个Bean，这时类型是已知的。在使用简单类型时，无法按照类型匹配，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> examples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Number of years to calculate the Ultimate Answer</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> years;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The Answer to Life, the Universe, and Everything</span></span><br><span class="line">    <span class="keyword">private</span> String ultimateAnswer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExampleBean</span><span class="params">(<span class="keyword">int</span> years, String ultimateAnswer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.years = years;</span><br><span class="line">        <span class="keyword">this</span>.ultimateAnswer = ultimateAnswer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则可以使用type标签显式指定构造函数参数的类型，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"7500000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果这仍不能消除歧义，可以直接指定参数的索引，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"7500000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>或者，你还可以使用参数的名字，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"years"</span> <span class="attr">value</span>=<span class="string">"7500000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ultimateAnswer"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>即我们可选的方法有：</p><ol><li>下标赋值</li><li>类型赋值赋值（类型相同有二义性，不建议使用）</li><li>参数名称赋值</li><li>引用另一个Bean</li></ol></li></ul><p>在容器加载的时候，容器中的对象实例都已经加载好了</p></li></ol><h2 id="5、Spring配置"><a href="#5、Spring配置" class="headerlink" title="5、Spring配置"></a>5、Spring配置</h2><h3 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5.1、别名"></a>5.1、别名</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--别名，为实例添加别名使得实例可以同时别名获取，但是为同一个实例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">alias</span>=<span class="string">"raincur"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2、Bean的配置"><a href="#5-2、Bean的配置" class="headerlink" title="5.2、Bean的配置"></a>5.2、Bean的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id： bean的唯一标识符，也就是对象名</span></span><br><span class="line"><span class="comment">class： bean对象所对应的全限定名： 包名 + 类型</span></span><br><span class="line"><span class="comment">name： 也是别名，而且更高级，可以同时取多个别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userT"</span> <span class="attr">class</span>=<span class="string">"com.rain.pojo.UserT"</span> <span class="attr">name</span>=<span class="string">"userT2,userT3 userT4;userT5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"RainCurtain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3、import"><a href="#5-3、import" class="headerlink" title="5.3、import"></a>5.3、import</h3><p>一般用于团队开发使用，可以将多个配置文件，导入合并为一个。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"beans.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"beans2.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"beans3.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如上，可以将所有配置文件导入到一个总配置中，使用时可直接导入总的配置文件applicationContext.xml 即可。便于开发使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Birdie要开始学Spring啦，冲冲冲&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="learning" scheme="http://yoursite.com/tags/learning/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>我们都是花剌子模国王</title>
    <link href="http://yoursite.com/2020/05/17/%E6%88%91%E4%BB%AC%E9%83%BD%E6%98%AF%E8%8A%B1%E5%89%8C%E5%AD%90%E6%A8%A1%E5%9B%BD%E7%8E%8B/"/>
    <id>http://yoursite.com/2020/05/17/%E6%88%91%E4%BB%AC%E9%83%BD%E6%98%AF%E8%8A%B1%E5%89%8C%E5%AD%90%E6%A8%A1%E5%9B%BD%E7%8E%8B/</id>
    <published>2020-05-17T09:50:42.000Z</published>
    <updated>2020-05-21T15:44:42.517Z</updated>
    
    <content type="html"><![CDATA[<p>读小波有感。</p><a id="more"></a><h1 id="我们都是花剌子模国王"><a href="#我们都是花剌子模国王" class="headerlink" title="我们都是花剌子模国王"></a>我们都是花剌子模国王</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;王小波在《花刺子模信使问题》中写到：</p><blockquote><p>据野史记载，中亚古国花刺子模有一古怪的风俗，凡是给君王带来好消息的信使，就会得到提升，给君王带来坏消息的人则会被送去喂老虎。</p></blockquote><p>&emsp;&emsp;王小波评价说：</p><blockquote><p>“花刺子模的君王有一种近似天真的品行，以为奖励带来好消息的人，就能鼓励好消息的到来，处死带来坏消息的人，就能根绝坏消息。”</p><h3 id="01"><a href="#01" class="headerlink" title="01"></a>01</h3><p>&emsp;&emsp;这个国家是否真的有这个传统我们不得而知，也并不重要。有趣的地方在于一般人都是趋利避害的，君王相当于是自然中生存的法则，适者生存之后只剩下了报告好消息的信使。由此以来，花剌子王国真的变成了一个“好消息”王国，虽然这个好消息不过是浮在真相水面上的薄冰。</p></blockquote><p>&emsp;&emsp;恰如“这盛世，如你所愿”。</p><h3 id="02"><a href="#02" class="headerlink" title="02"></a>02</h3><p>&emsp;&emsp;恰如，在这美妙的互联网时代，这美丽缤纷的互联网中总是上演着各种“撕逼”大战。双方往往是“自我群体高潮”，而对对方的理论不理不睬。人们根据言论而群分，在不利的“若水三千”中努力找到自己想看到的那“一瓢”，而对其他视而不见。努力维持着自己“爱豆”高尚的形象，把一切其他当作异己，把所有自己不愿相信的当作“洗脑”。最后只是为了遮蔽“烂”这个事实。</p><p>&emsp;&emsp;就像小波总结的：</p><blockquote><p>我人认为，获得受欢迎的信息有三种方法：其一，从真实中索取、筛选；其二：对现有信息加以改造；其三：凭空捏造。</p></blockquote><p>&emsp;&emsp;我们屡见不鲜，屡试不爽。</p><h3 id="03"><a href="#03" class="headerlink" title="03"></a>03</h3><p>&emsp;&emsp;除了“撕逼”大战，互联网自媒体时代中有着更鲜活的“好信使”，比如之前爆火然后被口诛笔伐的“咪蒙”。“好信使”的特点是要会说话，会说好话。当你窝在电脑旁抱着泡面麻木地看这电脑上的文字，你肯定更希望有人给你说看网文的好，而不说让你认清你如山高般的ddl和你颓废的人生。</p><p>&emsp;&emsp;正如你正幻想着自己是屏幕里爽文的主角，而不愿面对惨淡的人生。</p><p>&emsp;&emsp;正如你忽略着自己160的身高和体重，幻想着所有人都爱着你</p><p>&emsp;&emsp;而实际上如“咪蒙”般的营销号不是为了告诉你怎样生活，而是为了让你沉沦于现在的生活。他们甚至不在乎你读过会怎么样，他们只是想要在取悦你，让你情绪化，让你可以读他们的下一篇。</p><h3 id="04"><a href="#04" class="headerlink" title="04"></a>04</h3><p>&emsp;&emsp;不过细想过来，每个人都是逃避型的，而君主的故事实际上也发生在我们自己身上。每个人都喜欢爽文，除非他写的不够爽；每个人都会做白日梦，除非他不会做梦。</p><p>&emsp;&emsp;当我第一次读这一段时，如你一样，觉得这个君主脑子有问题。可常言道：“当你想要批评别人的时候，你最好先批评自己”。当我静下心来反思自己，我发现我们又何尝不是这样呢？</p><p>&emsp;&emsp;在高中时每次考试总有几个作弊的，奇怪的是每个人都知道这是自欺欺人，奇怪的是每个人都一直作弊而不愿面对自己学的不好的事实，每个人都在祈求高考晚一点来，这样好日子就不会到头。</p><p>&emsp;&emsp;这就像极了我那无数个考完试却不愿意对答案的晚上。</p><p>&emsp;&emsp;这就像极了我那不到最后一刻绝对不愿意写的ddl。</p><p>&emsp;&emsp;是我们趋利避害的本能，导致我们只能看到我们愿意看到的，听见我们想听见的。而事实上，坏消息和困难，还有人生中其他你不愿意面对的困境挫折，是客观存在的，无论你看不看它。当你一直不愿意去面对的时候，或许当那一刻真的来临，你能做的也只有继续抱头逃避。</p><p>&emsp;&emsp;不同的是有的人甘愿沉沦，在自己幻想的海洋里继续裸泳；有的人自命不凡，在命运无常的高山上勇攀高峰。</p><p>&emsp;&emsp;所以唯有真的勇士，才敢于直面惨淡的人生和淋血的现实。</p><h3 id="05"><a href="#05" class="headerlink" title="05"></a>05</h3><p>&emsp;&emsp;更多更广阔更现实的我们不做探讨。写这么多，其实就是想告诉大家，你是否也是那个花剌子国王呢？又或者你多大程度上是花剌子国王呢？逃避并不可耻，可耻的是甘愿逃避，甚至依恋逃避。</p><p>&emsp;&emsp;在说着“理智客观中立”的时候你是否想过你真的是所谓“理智客观公正”？在无可救药地相信着什么的时候你是否真的认为如此？还是说只不过是害怕自己错了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读小波有感。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔杂谈" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
      <category term="看法" scheme="http://yoursite.com/tags/%E7%9C%8B%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Global Round 7 Solution</title>
    <link href="http://yoursite.com/2020/03/25/Codeforces-Global-Round-7-Solution/"/>
    <id>http://yoursite.com/2020/03/25/Codeforces-Global-Round-7-Solution/</id>
    <published>2020-03-25T14:07:54.000Z</published>
    <updated>2020-05-21T15:52:50.972Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Codeforces Global Round 7比赛练习题解，个人使用，参考自官方题解。<br><a id="more"></a></p><h2 id="A-Bad-Ugly-Number"><a href="#A-Bad-Ugly-Number" class="headerlink" title="A. Bad Ugly Number"></a>A. Bad Ugly Number</h2><h3 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h3><p>&emsp;&emsp;给定$n$($0 \leq n \leq 10^5$),找到任意一个数整数$s$，满足:</p><ul><li>$s &gt; 0$</li><li>$s$由$n$个数字组成</li><li>$s$中的任意一位数不等于$0$</li><li>$s$不能被它的各位整除</li></ul><p>&emsp;&emsp;每个输出包括$t$组，若存在这样的$s$则输出一个，否则输出$-1$。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>&emsp;&emsp;构造题，当$n=1$时显然是找不到$s$的，输出$-1$，否则输出$22…223$，一共$n-1$个$2$。</p><h3 id="程序实现："><a href="#程序实现：" class="headerlink" title="程序实现："></a>程序实现：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'2'</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Maximums"><a href="#B-Maximums" class="headerlink" title="B. Maximums"></a>B. Maximums</h2><h3 id="描述：-1"><a href="#描述：-1" class="headerlink" title="描述："></a>描述：</h3><p>&emsp;&emsp;你有一个非负整数数组 $a_1,a_2,…,a_n$ ，对于每一个 $1 \leq i \leq n$，令$x_i = \max(0,a_1,…,a_{i-1})$。特别的，$x_1 = 0$。现在令$b_i = a_i - x_i$。给定$b[]$数组，要求输出$a[]$数组。</p><h3 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h3><p>&emsp;&emsp;由于$x_1 = 0$，那么显然有$a_1 = b_1$。显然由$a_1,…,a_i$已知，可以推出$x_{i+1}$，进而推出$a_{i+1}$，如此反复，直到推出所有的$a_i$。考虑到$x_i = \max(0,a_1,…,a_{i-1})$，我们可以令$ma = x_1$，这样每次迭代更新$ma = \max(ma, a_i)$即可。</p><h3 id="程序实现：-1"><a href="#程序实现：-1" class="headerlink" title="程序实现："></a>程序实现：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n, ma = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, x;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x + ma &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        ma = max(x + ma, ma);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Permutation-Partitions"><a href="#C-Permutation-Partitions" class="headerlink" title="C. Permutation Partitions"></a>C. Permutation Partitions</h2><h3 id="描述：-2"><a href="#描述：-2" class="headerlink" title="描述："></a>描述：</h3><p>&emsp;&emsp;给你一个由$1到n$组成的序列，现给定$k(k\leq n)$，要求将原序列分割成不重合的k段(这k段必须包含整个序列)。定义每段分区最大值的和为分区值，求：</p><ol><li>最大分区值</li><li>使分区值取得最大的分区有多少种情况<h3 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h3>&emsp;&emsp;对于第一个问题，显然的最大分区值就是从$n$向$n-k+1$求和的值。那么分区有多少种情况呢？我们考察$n$到$n-k+1$分割的$k+1$段序列长度。令$d_i = length\ of\ section\ i$，那么显然答案应该为$\prod_{i=1}^{k-1}{d_i+1}$。在实际处理种可以简单优化使得$d_i$的储存为$O(1)$的空间复杂度，整个算法只用遍里一次原数组。<h3 id="程序实现：-2"><a href="#程序实现：-2" class="headerlink" title="程序实现："></a>程序实现：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MAXN = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> ll MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll n, k, ans1 = <span class="number">0</span>, ans2 = <span class="number">1</span>;</span><br><span class="line">    ll dis = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">0</span>;i &lt; k;i++)</span><br><span class="line">        ans1 += n - i;</span><br><span class="line">    k = n - k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">1</span>, x;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= k)&#123;</span><br><span class="line">            <span class="keyword">if</span> (dis != <span class="number">0</span>)&#123;</span><br><span class="line">                ans2 *= (i - dis);</span><br><span class="line">                ans2 %= MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            dis = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans1 &lt;&lt; <span class="string">" "</span> &lt;&lt; ans2;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="D-Prefix-Suffix-Palindrome"><a href="#D-Prefix-Suffix-Palindrome" class="headerlink" title="D. Prefix-Suffix Palindrome"></a>D. Prefix-Suffix Palindrome</h2><h3 id="描述：-3"><a href="#描述：-3" class="headerlink" title="描述："></a>描述：</h3><p>给定字符串$s$，要求求它的一个最长字串$t$，满足：</p><ol><li>$t$是回文串</li><li>$t$由$s$的前缀和后缀拼接而成(前缀和后缀可为空串)<h3 id="解题思路：-3"><a href="#解题思路：-3" class="headerlink" title="解题思路："></a>解题思路：</h3>&emsp;&emsp;我们将$t$分成两部分，一个是前后缀中共同组成回文的部分，另一个是中间部分的回文串。对于前者我们直接逐个比较$s[i]==s[n-i-1]$即可。对于中间部分，我们将中间部分取出，设为$x$，现在的问题是求$x$的最大回文前缀或者最大回文后缀。</li></ol><p>&emsp;&emsp;令我没有想到的是这个可以利用前缀数组求，即构造$x’=x+”*”+\check{x}$，然后求一下前缀数组即可，最后一位前缀值就是最长的前缀回文长度。然后我们对$x$正序做一次，逆序做一次然后比较长度就可以了。</p><h3 id="程序实现：-3"><a href="#程序实现：-3" class="headerlink" title="程序实现："></a>程序实现：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> pi[MAXN], j;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">solve_mid</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str = s;</span><br><span class="line">    reverse(str.begin(), str.end());</span><br><span class="line">    str = s + <span class="string">"#"</span> + str;</span><br><span class="line">    <span class="keyword">int</span> n = str.size();</span><br><span class="line">    pi[<span class="number">0</span>] = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; str[j] != str[i]) j = pi[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(str[j] == str[i]) j++;</span><br><span class="line">        pi[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.substr(<span class="number">0</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[i] == s[n - i - <span class="number">1</span>] &amp;&amp; i &lt; n - i - <span class="number">1</span>) i++;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; s.substr(<span class="number">0</span>, i);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">2</span> * i &lt; n)&#123;</span><br><span class="line">        <span class="built_in">string</span> sub = s.substr(i, n - <span class="number">2</span> *i);</span><br><span class="line">        <span class="built_in">string</span> a = solve_mid(sub);</span><br><span class="line">        reverse(sub.begin(), sub.end());</span><br><span class="line">        <span class="built_in">string</span> b = solve_mid(sub);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (a.size() &gt; b.size() ? a : b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; s.substr(n - i, i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;因为之前时间安排问题，这是我的第一篇题解(其实CF一直在打)。虽然自己很菜，也没想过能够在ACM上拿奖，但是总不能拉下太多吧。毕竟总不能刚开始来的时候大家一样菜，一年后人家摘金夺银你毫无进步吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;Codeforces Global Round 7比赛练习题解，个人使用，参考自官方题解。&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM Practice" scheme="http://yoursite.com/categories/ACM-Practice/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="Solution" scheme="http://yoursite.com/tags/Solution/"/>
    
      <category term="learning" scheme="http://yoursite.com/tags/learning/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>New life</title>
    <link href="http://yoursite.com/2020/03/17/New-life/"/>
    <id>http://yoursite.com/2020/03/17/New-life/</id>
    <published>2020-03-16T16:02:54.000Z</published>
    <updated>2020-03-16T16:31:44.903Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;自高考完以来，在挣扎中，在体悟中，我越来越领悟到友情、亲情等除了爱情之外的美好。</p> <a id="more"></a><p>&emsp;&emsp;人是自以为是的，自以为正确的。我们总是在不自觉地为自己辩解。于是以往我一直觉得，“别人都不懂，没必要交流”，当然中二过后便是大错特错。我习惯于封锁内心，也习惯嘻嘻哈哈。我家人经常夸我，说我心理素质好，其实并不是，只是不知如何表达罢了。</p><p>&emsp;&emsp;我是幸运的，起码大学是幸运的。我很幸运拥有以为史杰佳一样的舍友。刚进大学，和我刚进入高中是一样的，因为一切都是新的。是时候重新定义自己。于是我对史敞开心扉，无话不谈。我的前女友，我又看上了谁，谁约我出去，我的过往。我知道他不会拿这些开玩笑，我也知道他愿意倾听。这改变了我很多。我开始慢慢变得真正的自信起来，慢慢地学会了如何与人交流。我开始慢慢注意别人是如何交流的，学习别人如何处理同性异性之间的关系，一点一点的。当出现矛盾时该退让还是坚守？面对对方或自己的问题应该如何解决？人与人交往的底线是什么？我是该生气还是应该谅解？</p><p>&emsp;&emsp;毫不避讳的说，我现在没有答案，我现在一无所知。我渴望我可以知道。我不想伤害别人，尤其是一个爱着你的你却不知甚至妄加猜测的人。</p><p>&emsp;&emsp;我之前写过，很多人改变了我。我也算是成年了，18载光阴不可白活。可是有时候细想过来，有几人可以真正地去谈一谈。这并不是说关系不好。我相信我有着一群朋友，可以接受我的逆境的朋友。只是我越发发现人和人的关系，并不是关系越好互相能做的事越多的。人和人是不同的，那么不同人之间的关系也不应该简单度量。这么显浅的道理，我曾为什么不懂呢？</p><p>&emsp;&emsp;秦旭曾经说，你和姬文萱是不一样的，你们在我生命中是不同的位置。我不明白，我说怎么会是不同的呢，我认为一个就够了。</p><p>&emsp;&emsp;现在发现确实很不同，有的人就是可以谈心，有的人就是会毫不犹豫帮你，有的人就是可以带来快乐，有的人就是给你心灵上的温暖。</p><p>&emsp;&emsp;我希望，或许在未来的某一天，秦旭，我们会再次相爱。我们会遇见很多矛盾，像之前一样。我们可以很轻松地互相开玩笑而不必当真。我们可以在朋友面前互损但是心里毫不介意。最终我们变得像家人一样，“学溶于水后看不见红色”。我们也许会犯错，但是是简单的，人都会犯错。</p><p>&emsp;&emsp;我希望可以像高考前那次那样，再来一次拥抱。除了你和家人，我只在初中毕业聚会上告别时礼节性的抱过一位异性。所以也许这么说有点讨巧，但是那真的是我目前为止最美妙的一个拥抱。起码在我的回忆中无比美好。</p><p>&emsp;&emsp;夕阳，高考，蛋糕，伊人，拥抱，暧昧。这些美好的元素汇集在一个下午。</p><p>&emsp;&emsp;又或许我早已没有权利去述说这一切。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;自高考完以来，在挣扎中，在体悟中，我越来越领悟到友情、亲情等除了爱情之外的美好。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔杂谈" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
      <category term="感悟" scheme="http://yoursite.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>谈幸福</title>
    <link href="http://yoursite.com/2020/03/11/%E8%B0%88%E5%B9%B8%E7%A6%8F/"/>
    <id>http://yoursite.com/2020/03/11/%E8%B0%88%E5%B9%B8%E7%A6%8F/</id>
    <published>2020-03-11T15:19:26.000Z</published>
    <updated>2020-03-11T15:35:59.848Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;我曾一直在思考，什么是幸福？我们怎么幸福？<a id="more"></a>我做了一个大胆的假设，当我所有所期望的物质条件全部被满足之后（不再为钱而发愁，但也不至于“不爱钱，没碰过钱”），我就可以幸福了吗？</p><p>&emsp;&emsp;正如之前单身的时候（现在也是），总是期望能有一场甜掉牙的恋爱，也总是觉得有了女朋友，糖就来了。但是我发现事与愿违，总是有很多约束束缚着我们，老师家长同学等等。但其实最束缚的还是我们自己。我们无法做到开诚布公，也无法相信对方开诚布公，无法忍受对方的观念并为此大吵特吵。</p><p>&emsp;&emsp;爱情是需要酝酿的，不是想来的，是真的需要努力，努力地去挣脱自我的束缚的。爱情是一种能力。宽容、接受、交流、共情甚至你自身的一些特征，才能铸就爱情。谈恋爱时我常常痛恨自己不够幽默，不够大气，情商低，在面对困扰时束手无策。</p><p>&emsp;&emsp;幸福也如此。如果给了我足够的物质，不出意外我很可能会去放纵自己，虽然我知道沉浸在知识和探索中的快乐是长久而高尚的，但是远不及放纵来的轻易与猛烈。可是久而久之，原有的刺激就不再满足于我，而去追求更高的刺激，而每天醉生梦死之后只剩萧条。这样是真的快乐吗？是真的幸福吗？</p><p>&emsp;&emsp;有一天早上我打开联盟，打了一盘又一盘，没有人管我，打到最后只剩机械的点击鼠标，我的精神已经萎靡了，我需要休息，但是我不愿。因为这意味着放弃现有的刺激，虽然我知道休息后的快乐会多得多。</p><p>&emsp;&emsp;幸福不仅仅是一种状态，幸福更是一种能力。</p><p>&emsp;&emsp;幸福是需要自我约束的，“自律给我自由”这句话并不只是无用的鸡汤，更是有它其中的道理，真正自律了你才能摆脱刻在你基因中那些放纵的本性，修饰掉人固有的趋利避害性——只看眼前的趋利避害，从而让自己真正可以去做自己想做的事情，而不是做兽性的傀儡。</p><p>&emsp;&emsp;所以我们要在任何时候保持规律的作息和平静的心态。时时刻刻让自己的意志控制住自己，而不是让欲望绑架着自己。这是一种良好积极的生活态度，一把打开幸福之门的钥匙。真正的快乐，平淡而源远流长，蕴含在每天不经意的瞬间，绽放于心愿完成后的惊喜，而不是放纵后的枯燥无味。</p><p>&emsp;&emsp;很多时候，我们看似掌握全局，实则是在博弈。败者的下场只有一个，失去自我意志。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;我曾一直在思考，什么是幸福？我们怎么幸福？
    
    </summary>
    
    
      <category term="随笔杂谈" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
      <category term="看法" scheme="http://yoursite.com/tags/%E7%9C%8B%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Git&amp;GitHub初体验</title>
    <link href="http://yoursite.com/2020/02/28/Github_first_try/"/>
    <id>http://yoursite.com/2020/02/28/Github_first_try/</id>
    <published>2020-02-28T07:18:31.000Z</published>
    <updated>2020-05-21T15:52:44.503Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在搭建博客的过程中开始真正接触到git这一强大的工具，也就很快对其产生了好奇心。于是写一篇博客来记录自己学习git和github的过程。</p> <a id="more"></a><p>&emsp;&emsp;首先推一篇<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的博客</a>，内容详实，语言幽默。我也是跟着这篇博客学习的。</p><h2 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h2><h3 id="git是什么"><a href="#git是什么" class="headerlink" title="git是什么"></a>git是什么</h3><p>&emsp;&emsp;git是一个分布式的版本控制系统，可以帮助我们进行版本控制。而GitHub是一个远程的代码仓库，可以帮助我们进行代码托管。</p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>&emsp;&emsp;Windows下通过<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官网</a>下载即可，安装提示安装后可以在cmd中通过<code>git --version</code>来查看自己是否配置成功。如图:<br><img src="\../images/git_version.png" alt="git_version"></p><h3 id="建立本地版本库"><a href="#建立本地版本库" class="headerlink" title="建立本地版本库"></a>建立本地版本库</h3><h4 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h4><p>&emsp;&emsp;又名仓库，英文名为repository(就是github上的那个)，里面文件的操作可以被git记录，包括修改和删除，以便在需要的时候进行版本回退。在我看来，就好像在你的工作目录里面设置了一个机器人可以帮助你进行代码管理。当你完成工作后，就告诉它一声“我刚刚的工作完了，帮我作个记录吧！这次的工作是XXX”。然后某天你想回到之前的版本的时候，只需要给它说：“哦，上帝！我不小心搞砸了，请帮我回退到我做XXX工作的那次吧！”，然后就可以回退到之前的版本了。当然目前我的理解可能十分不到位……毕竟也是刚接触，对git的机理尚不熟悉。</p><h4 id="使用git-init初始化仓库"><a href="#使用git-init初始化仓库" class="headerlink" title="使用git init初始化仓库"></a>使用<code>git init</code>初始化仓库</h4><p>&emsp;&emsp;我们在cmd中进入到自己的工程根目录所在的文件夹，然后使用<code>git init</code>命令就可以初始化一个仓库了。如图：<br><img src="\../images/git_init.png" alt="git_init"><br>然后在目录下我们可以看到多了一个名为<code>.git</code>的隐藏文件夹。里面是git的配置文件，我们无须关心，也不要去动。如图:<br><img src="\../images/git_folder.png" alt="git_folder"><br>这里为了演示我是新建了一个空文件夹，当让如果文件夹里面已经有了文件，也是被允许的。</p><h4 id="修改仓库中的文件"><a href="#修改仓库中的文件" class="headerlink" title="修改仓库中的文件"></a>修改仓库中的文件</h4><p>&emsp;&emsp;一般来说，每个仓库都会有一个<code>README</code>文件（起码我目前看到的是这样），用于告诉别人（因为git很常用于多人协作）这个项目是做什么的，里面的文件是什么等等，就起一个摘要的作用。所以我们给我们的仓库添加一个<code>README</code>文件，当然必须在仓库的根目录或者子目录里面创建，否则git是追踪不到的。根据廖雪峰老师的博客，git只能监视文本文件内容的具体改动，比如一个txt文件，你写了”Hello World”，这个是可以被git所具体知道的。但是如果一个二进制文件，比如一张图片，你把它裁剪了一部分，它只知道照片小了，但具体改动它是不明确的。(word也是二进制文件！震惊！)</p><p>&emsp;&emsp;我们在仓库根目录下新建<code>README.txt</code>文件，更改里面的内容如下(不要使用记事本，这可能会带来意料之外的编码错误):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is a README file.</span><br><span class="line">Glad to meet you.</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;然后我们需要告知git我们对文件进行了修改，需要如下命令:</p><p>&emsp;&emsp;第一步:使用<code>git add [file name]</code>告知git，我们将哪些文件添加到仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add README.txt</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;第二步:使用<code>git commit</code>告知git，将文件提交到仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;First commit&quot;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;其中,<code>-m</code>参数后面跟的是这次提交的描述。也就是我们改动了什么一类的内容。当然你可以随便写，但是最好是有实际意义，否则下一个接手的人可能想杀人。</p><p>&emsp;&emsp;当然这里有一个疑问，就是为什么将一个文件在版本库更新为什么要分两步呢？第一步<code>add</code>可以多次使用,选择不同的文件，然后使用<code>commit</code>一次提交。可以使用<code>add .</code>来选定所有文件。</p><p>&emsp;&emsp;至于具体的版本控制，emmmmmm这个我也不会，因为还没有用到过……所以还是先说一下<code>github</code>的使用。</p><h2 id="远程仓库，GitHub"><a href="#远程仓库，GitHub" class="headerlink" title="远程仓库，GitHub"></a>远程仓库，GitHub</h2><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p>&emsp;&emsp;注册一个GitHub账号，在GitHub右上角可以创建一个新的远程仓库。如下图:</p><p><img src="\../images/github_new_repo.png" alt="github_new_repo"></p><p>&emsp;&emsp;点进去页面如下:</p><p><img src="\../images/github_create_repo.png" alt="github_create_repo"></p><p>&emsp;&emsp;用作演示，我们创建了一个名为<code>GitHubTest</code>的仓库，并且没有初始化<code>README</code>文件。如下图:(当然什么都没有)</p><p><img src="\../images/GitHubTest_repo.png" alt="GitHubTest_repo"></p><p>&emsp;&emsp;其中红框的部分是这个仓库的公钥，我们在本地根据这个公钥可以关联这个远程仓库。当然，别人的仓库你也是可以关联的，但是由于对方仓库的权限限制，你无法进行同步操作。</p><p>&emsp;&emsp;我们在cmd中进入到本地仓库的根目录，执行命令<code>git remote add origin [仓库SSH]</code>,SSH即为前面图片框起来的部分。如图:</p><p><img src="\../images/git_remote.png" alt="git_remote"></p><p>&emsp;&emsp;似乎是什么都没发生，那就说明我们没做错。简洁的即是美的。</p><p>&emsp;&emsp;这个命令的作用是关联一个远程仓库，其中<code>origin</code>是这仓库的名字，当然你也可以用别的单词来代替。但<code>origin</code>是我们约定俗称的，用来表示远程仓库。</p><p>&emsp;&emsp;下面我们应用<code>git push -u origin master</code>将本地仓库推送到远程仓库上。</p><p><img src="\../images/git_push.png" alt="git_push"></p><p>&emsp;&emsp;把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>&emsp;&emsp;由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。(这段是抄的)</p><p>&emsp;&emsp;当我们查看我们的远程仓库时，你会惊奇地发现，我们的远程仓库已经有了和本地仓库一样的文件(第一次这么做的时候我惊喜了老半天，觉得好神奇)。如图:</p><p><img src="\../images/github_check.png" alt="git_check"></p><p>&emsp;&emsp;以后我们提交远程仓库，只需要使用<code>git push origin master</code>就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;在搭建博客的过程中开始真正接触到git这一强大的工具，也就很快对其产生了好奇心。于是写一篇博客来记录自己学习git和github的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="github" scheme="http://yoursite.com/categories/github/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="learning" scheme="http://yoursite.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>RainCurtain</title>
    <link href="http://yoursite.com/2020/02/25/RainCurtain/"/>
    <id>http://yoursite.com/2020/02/25/RainCurtain/</id>
    <published>2020-02-25T15:17:08.000Z</published>
    <updated>2020-03-11T15:50:28.116Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;日子一天天地过，每天似乎毫无新意。</p> <a id="more"></a><p>&emsp;&emsp;今天19年10月14日，也不算是个什么特别的日子。不多能让我的这一天变得特殊的，或许就是在今天我开通了我的第一个博客吧。细想过来每一天都是那么的相似，不过是因为有了某些事情，才变得特殊起来，比如新生命的诞生，又比如挚爱的分别。  </p><p>&emsp;&emsp;说起来写一个博客还是昨天ACM讲座听一位dalao演讲时建议的，说写一个博客，记录自己的学习历程，一方面可以记录自己生活中的点点滴滴，另一方面可以当作笔记来用，学完别人的再自己写一遍总会好很多，再一方面也算是互帮互助吧，在学习的过程中很多人给予了我们很多力量，我们也要给与更多人更多力量。  </p><p>&emsp;&emsp;我给这篇文章取名为RainCurtain，这是恰好昨天许嵩发了一首新歌，名字就叫做雨幕，初听很平淡，旋律也是感觉很相似。细听好像有那么几分味道，曲子听起来也还不错。无所谓了，反正我无法做到客观中立，那我就自己开心好了。  </p><p>&emsp;&emsp;雨幕，说起来我还真没想到西安也是一座“阴雨的小城”，来到西安，大半数时间都在阴雨天气吧，见到阳光是一件很奢侈的事情。我戏称这是西北的“梅雨季节”。  </p><p>&emsp;&emsp;说实话西安给我的第一印象并不是很好，因为阴天。阴天，雨雾，给人以一种阴沉沉的感觉。虽然我喜欢阴雨。但是习惯了北湖的阳光与纯净的天空与新鲜的空气的我难免有些不适应。</p><p>&emsp;&emsp;不过想来喜欢阴雨，是因为它总能让我回忆起之前的一些事情，比如儿童时期雨天一起在村大队里的玩闹，比如初中那些在雨中在操场上在城市中的狂奔，又比如高中雨中的运动会，以及秦旭。不过来到西安后，这些都不见了，都离我远去了。想在雨天抽身找人一起闲逛聊聊之前，看看往后都找不到了。甚至想对望一眼恒大的那一件屋子也做不到了。见不到熟悉的人熟悉的景熟悉的事。“叹一句当时只道是寻常”</p><p>&emsp;&emsp;<strong>不过现在也会变成寻常吧，我猜。</strong></p><p>&emsp;&emsp;其实很多事情就是这样吧，当你觉得以后总会有很多的时候，最后你才会发现原来“盛庭难在”。就像之前那一段时间秦旭几乎每个星期都陪我出去玩，我就以为以后我们出来玩的时间多着呢，然后就再没出来过。就像暑假秦旭说：这是我最后一次和你出来了；然后那以后我到现在还没再见到她，除了在梦里和在网上。</p><p>&emsp;&emsp;<strong>挺好的，现在就挺好的我觉得。真的挺好的。我不想再有什么改变，但我知道这种状态是一种伪装的平衡，指不定哪天就突然消失不见，只剩下怀念。</strong></p><p>&emsp;&emsp;那我不如好好珍惜这最近慵懒平静开心自由的快乐生活，在它远离之前好好的享受它。毕竟谁也不知道明天会不会突然世界毁灭或者猝死。</p><p>&emsp;&emsp;<strong>也许人世间一切的美好都是短暂的，短暂所以美丽。终会消逝。与其祈求长久，不如把握当下，珍惜时光。</strong></p><p>&emsp;&emsp;或许这样便可留住快乐，或者说，坦坦荡荡好过忧情伤神。</p><p>&emsp;&emsp;说了这么多，似乎是和“雨幕”没有什么关系。也没必要有什么关系，只不过是从下雨让我联想到了很多事情罢了。</p><p>　　The world is a dream in rain<br>　　The splashes of water shines don’t you see<br>　　Watch out<br>　　Don’t step on the fish in the pool<br>　　I’m a little soaking mouse<br>　　I’m wet with a blanket of rain<br>　　And I dream of you</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;日子一天天地过，每天似乎毫无新意。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔杂谈" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
      <category term="情绪" scheme="http://yoursite.com/tags/%E6%83%85%E7%BB%AA/"/>
    
  </entry>
  
</feed>
